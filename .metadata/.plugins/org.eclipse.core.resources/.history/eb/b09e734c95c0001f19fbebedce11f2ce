import network._;

class Account (accessDevice : AccessDevice, accountId : Int) {
	object constants {
		val MINPAYMENT = 1
		val MAXPAYMENT = 20
		val MINBALANCE = 0
		val MAXBALANCE = 200
	}
	
	val concession : Concession = new Concession()
	
	var balance : Int = 0
	var status = AccountStatus.Enabled
	val travelHistory : List[TravelRecord] = List()

	var userEntryPoint: EntryPoint = _
	
	def setBalance (amount : Int){ balance = amount}

	def getBalance():Int = balance
	
	def addToBalance (amount : Int) {balance += amount}
	def subtractFromBalance (amount : Int) {balance -= amount}
	
	def startTrip (entryPoint : EntryPoint):Boolean = {
		var successful : Boolean = false;
		if (Network.routeStartsWith(entryPoint)
				&& userEntryPoint == null
				&& balance >= MINBALANCE + PENALTYFARE
				&& status == AccountStatus.Enabled) {
			userEntryPoint = entryPoint
			successful = true
		}
		
		return successful
	}
	def endTrip (exitPoint : ExitPoint)
}